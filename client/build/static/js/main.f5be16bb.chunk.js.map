{"version":3,"sources":["Components/Chrat.js","Components/ContentCountry.js","module/sort.js","Components/ContentWorld.js","Components/ContentKorea.js","App.js","index.js"],"names":["localeString","value","toLocaleString","comma","tooltipItem","toString","replace","Chrat","today","daily","total","monthly","newConfirmed","labels","slice","length","map","item","date","substring","datasets","label","labelFontFamily","borderColor","fill","data","confirmed","newConfirmedOption","title","display","text","fontSize","fontFamily","legend","position","scales","xAxes","ticks","yAxes","callback","tooltips","titleFontFamily","bodyFontFamily","callbacks","labelColor","chart","backgroundColor","monthlyOption","todayState","Confirmed","Recovered","Deaths","todayStateOption","dataset","datasetIndex","reduce","previousValue","currentValue","index","percentage","Math","floor","Country","className","recovered","deaths","options","Contents","props","useState","setTotal","setToday","setDaily","setMonthly","init","setInit","country","match","params","slug","useEffect","fetchEvents","a","axios","get","res","makeData","yesterday","Date","arr","i","push","items","acc","cur","currentDate","year","getFullYear","month","getMonth","getDate","active","Active","death","findItem","find","descCountry","b","asceCountry","descConfirmed","TotalConfirmed","asceConfirmed","descRecovered","TotalRecovered","asceRecovered","descDeaths","TotalDeaths","asceDeaths","world","setWorld","countries","setCountries","sortState","setSortstate","global","Global","NewConfirmed","NewDeaths","NewRecovered","Countries","sort","sortData","criteria","style","color","onClick","href","Slug","verify","filter","element","selectOptions","App","onChange","e","preventDefault","currentTarget","location","origin","option","exact","path","component","Korea","World","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5be16bb.chunk.js","sourcesContent":["import React from 'react'\nimport { Line, Bar, Doughnut } from 'react-chartjs-2'\nimport './Chart.css'\n\nconst localeString = function (value) {\n    return value.toLocaleString();\n}\n\nconst comma = function (tooltipItem) {\n    const x = tooltipItem.value;\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction Chrat({ today, daily, total, monthly }) {\n    const newConfirmed = {\n        labels: daily && daily.slice(daily.length - 14, daily.length).map(item => `${item.date.substring(5, 10)}`),\n        datasets: [\n            {\n                label: \"신규 확진자\",\n                labelFontFamily: 'GmarketSansMedium',\n                borderColor: \"salmon\",\n                fill: false,\n                data: daily && daily.slice(daily.length - 14, daily.length).map(item => item.confirmed)\n            }\n        ]\n    }\n\n    const newConfirmedOption = {\n        title: { display: true, text: \"신규 확진자 추이 (최근 2주)\", fontSize: 16, fontFamily: 'GmarketSansMedium' },\n        legend: { display: false, position: \"bottom\" },\n        scales: {\n            xAxes: [{\n                ticks: {\n                    fontFamily: 'GmarketSansMedium'\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    callback: localeString,\n                    fontFamily: 'GmarketSansMedium'\n                }\n            }]\n        },\n        tooltips: {\n            titleFontFamily: 'GmarketSansMedium',\n            bodyFontFamily: 'GmarketSansMedium',\n            callbacks: {\n                label: comma,\n                labelColor: function (tooltipItem, chart) {\n                    return {\n                        borderColor: 'salmon',\n                        backgroundColor: 'salmon'\n                    };\n                }\n            }\n        }\n    }\n\n    const monthlyOption = {\n        title: { display: true, text: \"누적 확진자 추이\", fontSize: 16, fontFamily: 'GmarketSansMedium' },\n        legend: { display: false, position: \"bottom\" },\n        scales: {\n            xAxes: [{\n                ticks: {\n                    fontFamily: 'GmarketSansMedium'\n                }\n            }],\n            yAxes: [{\n                ticks: {\n                    callback: localeString,\n                    fontFamily: 'GmarketSansMedium'\n                }\n            }]\n        },\n        tooltips: {\n            titleFontFamily: 'GmarketSansMedium',\n            bodyFontFamily: 'GmarketSansMedium',\n            callbacks: {\n                label: comma\n            }\n        }\n    }\n\n    const todayState = {\n        labels: [\"확진자\", \"격리해제\", \"사망\"],\n        datasets: [\n            {\n                label: \"누적 확진, 해제, 사망 비율\",\n                backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\n                borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\n                fill: false,\n                data: total &&\n                    [total[total.length - 1].Confirmed, total[total.length - 1].Recovered, total[total.length - 1].Deaths],\n            }\n        ]\n    }\n\n    const todayStateOption = {\n        title: { display: true, text: `확진, 해제, 사망 비율 (${today && today.date.substring(0, 10)})`, fontSize: 16, fontFamily: 'GmarketSansMedium' },\n        legend: { display: true, position: \"bottom\", labels: { fontFamily: 'GmarketSansMedium' } },\n        tooltips: {\n            titleFontFamily: 'GmarketSansMedium',\n            bodyFontFamily: 'GmarketSansMedium',\n            callbacks: {\n                label: function (tooltipItem, data) {\n                    const dataset = data.datasets[tooltipItem.datasetIndex];\n                    const total = dataset.data.reduce((previousValue, currentValue) => previousValue + currentValue)\n                    const currentValue = dataset.data[tooltipItem.index];\n                    const percentage = Math.floor(((currentValue / total) * 100) + 0.5);\n\n                    return `${currentValue.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} (${percentage}%)`\n                }\n            }\n        }\n    }\n\n    return (\n        <>\n            {\n                today && daily &&\n                <>\n                    <h2>{total[0].Country === \"Korea (South)\" ? \"국내\" : total[0].Country}의 {today.date.substring(0, 10)} 코로나 현황</h2>\n                    <ul className=\"summary\">\n                        <li className=\"confirmed\">\n                            <h4>확진환자</h4>\n                            <h3>{total[total.length - 1].Confirmed.toLocaleString()}</h3>\n                            <h4>{today.confirmed > 0 ? '▲' : null} {today.confirmed.toLocaleString()} </h4>\n                        </li>\n                        <li className=\"recovered\">\n                            <h4>격리해제</h4>\n                            <h3>{total[total.length - 1].Recovered.toLocaleString()}</h3>\n                            <h4>{today.recovered > 0 ? '▲' : null} {today.recovered.toLocaleString()}</h4>\n                        </li>\n                        <li className=\"deaths\">\n                            <h4>사망</h4>\n                            <h3>{total[total.length - 1].Deaths.toLocaleString()}</h3>\n                            <h4>{today.deaths > 0 ? '▲' : null} {today.deaths.toLocaleString()}</h4>\n                        </li>\n                    </ul>\n                    <sub>※ 수치가 비정상적으로 보일 경우는 API DB의 문제이니 양해바랍니다.</sub>\n                    <br />\n                    <sub>※ 격리해제자의 수치가 0으로 표시되고 있으니 양해바랍니다.</sub>\n                </>\n            }\n\n            <div className=\"chart\">\n                <div>\n                    <Line\n                        data={newConfirmed}\n                        options={newConfirmedOption}\n                    />\n                </div>\n\n                <div>\n                    <Bar\n                        data={monthly}\n                        options={monthlyOption}\n                    />\n                </div>\n\n                <div>\n                    <Doughnut\n                        data={todayState}\n                        options={todayStateOption}\n                    />\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Chrat\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Chrat from './Chrat';\r\n\r\nconst Contents = props => {\r\n    const [total, setTotal] = useState(null);\r\n    const [today, setToday] = useState(null);\r\n    const [daily, setDaily] = useState(null);\r\n    const [monthly, setMonthly] = useState({});\r\n    const [init, setInit] = useState(false);\r\n\r\n    const country = props.country || props.match.params.slug;\r\n\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            const res = await axios.get(`https://api.covid19api.com/total/dayone/country/${country}`);\r\n            const data = res.data;\r\n\r\n            setTotal(data);\r\n            makeData(data);\r\n\r\n            const today = data[data.length - 1];\r\n            const yesterday = data[data.length - 2];\r\n            setToday({\r\n                date: today.Date,\r\n                confirmed: today.Confirmed - yesterday.Confirmed,\r\n                deaths: today.Deaths - yesterday.Deaths,\r\n                recovered: today.Recovered - yesterday.Recovered\r\n            })\r\n\r\n            let arr = [];\r\n            for (let i = 0; i < data.length; i++) {\r\n                i === 0 ?\r\n                    arr.push({\r\n                        date: data[i].Date,\r\n                        confirmed: data[i].Confirmed,\r\n                        recovered: data[i].Recovered,\r\n                        deaths: data[i].Deaths\r\n                    }) :\r\n                    arr.push({\r\n                        date: data[i].Date,\r\n                        confirmed: data[i].Confirmed - data[i - 1].Confirmed,\r\n                        recovered: data[i].Recovered - data[i - 1].Recovered,\r\n                        deaths: data[i].Deaths - data[i - 1].Deaths\r\n                    })\r\n            }\r\n            setDaily(arr);\r\n\r\n            await setInit(true)\r\n        }\r\n\r\n        const makeData = items => {\r\n            const arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const death = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find(a => a.year === year && a.month === month)\r\n                if (!findItem) {\r\n                    acc.push({ year, month, date, confirmed, active, death, recovered })\r\n                }\r\n                if (findItem && findItem.date < date) {\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.date = date;\r\n                    findItem.confirmed = confirmed;\r\n                    findItem.active = active;\r\n                    findItem.death = death;\r\n                    findItem.recovered = recovered;\r\n                }\r\n\r\n                return acc;\r\n            }, [])\r\n\r\n            const labels = arr.map(a => `${a.year - 2000}-${a.month + 1}`)\r\n\r\n            setMonthly({\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"누적 확진자\",\r\n                        backgroundColor: \"salmon\",\r\n                        fill: true,\r\n                        data: arr.map(a => a.confirmed)\r\n                    }\r\n                ]\r\n            })\r\n        }\r\n\r\n        fetchEvents()\r\n    }, [country])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                init ?\r\n                    <Chrat\r\n                        total={total}\r\n                        today={today}\r\n                        daily={daily}\r\n                        monthly={monthly}\r\n                    /> : 'Loading...'\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Contents","export const descCountry = (a, b) => {\r\n    if (a.Country === b.Country) return 0;\r\n    return a.Country > b.Country ? 1 : -1;\r\n}\r\nexport const asceCountry = (a, b) => {\r\n    if (a.Country === b.Country) return 0;\r\n    return a.Country > b.Country ? -1 : 1;\r\n}\r\nexport const descConfirmed = (a, b) => {\r\n    if (a.TotalConfirmed === b.TotalConfirmed) return 0;\r\n    return b.TotalConfirmed - a.TotalConfirmed;\r\n}\r\nexport const asceConfirmed = (a, b) => {\r\n    if (a.TotalConfirmed === b.TotalConfirmed) return 0;\r\n    return a.TotalConfirmed - b.TotalConfirmed;\r\n}\r\nexport const descRecovered = (a, b) => {\r\n    if (a.TotalRecovered === b.TotalRecovered) return 0;\r\n    return b.TotalRecovered - a.TotalRecovered;\r\n}\r\nexport const asceRecovered = (a, b) => {\r\n    if (a.TotalRecovered === b.TotalRecovered) return 0;\r\n    return a.TotalRecovered - b.TotalRecovered;\r\n}\r\nexport const descDeaths = (a, b) => {\r\n    if (a.TotalDeaths === b.TotalDeaths) return 0;\r\n    return b.TotalDeaths - a.TotalDeaths;\r\n}\r\nexport const asceDeaths = (a, b) => {\r\n    if (a.TotalDeaths === b.TotalDeaths) return 0;\r\n    return a.TotalDeaths - b.TotalDeaths;\r\n}\r\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Chart.css';\nimport * as sort from '../module/sort';\n\nconst Contents = () => {\n    const [world, setWorld] = useState(null);\n    const [countries, setCountries] = useState(null);\n    const [sortState, setSortstate] = useState(\"descConfirmed\");\n    const [init, setInit] = useState(false);\n\n    useEffect(() => {\n        const fetchEvents = async () => {\n            const res = await axios.get(`https://api.covid19api.com/summary`);\n            const data = res.data;\n\n            const global = data.Global;\n            setWorld({\n                date: global.Date,\n                NewConfirmed: global.NewConfirmed,\n                NewDeaths: global.NewDeaths,\n                NewRecovered: global.NewRecovered,\n                TotalConfirmed: global.TotalConfirmed,\n                TotalDeaths: global.TotalDeaths,\n                TotalRecovered: global.TotalRecovered\n            })\n\n            switch (sortState) {\n                case \"descCountry\":\n                    setCountries(data.Countries.sort(sort.descCountry));\n                    break;\n                case \"asceCountry\":\n                    setCountries(data.Countries.sort(sort.asceCountry));\n                    break;\n                case \"descConfirmed\":\n                    setCountries(data.Countries.sort(sort.descConfirmed));\n                    break;\n                case \"asceConfirmed\":\n                    setCountries(data.Countries.sort(sort.asceConfirmed));\n                    break;\n                case \"descRecovered\":\n                    setCountries(data.Countries.sort(sort.descRecovered));\n                    break;\n                case \"asceRecovered\":\n                    setCountries(data.Countries.sort(sort.asceRecovered));\n                    break;\n                case \"descDeaths\":\n                    setCountries(data.Countries.sort(sort.descDeaths));\n                    break;\n                case \"asceDeaths\":\n                    setCountries(data.Countries.sort(sort.asceDeaths));\n                    break;\n                default:\n                    setCountries(data.Countries.sort(sort.descConfirmed));\n            }\n\n            await setInit(true)\n        }\n\n        fetchEvents()\n    }, [sortState])\n\n    const sortData = criteria => {\n        sortState === `asce${criteria}` ? setSortstate(`desc${criteria}`) :\n            sortState === `desc${criteria}` ? setSortstate(`asce${criteria}`) : setSortstate(`desc${criteria}`);\n    }\n\n    return (\n        <>\n            {\n                init ?\n                    (world && countries &&\n                        <>\n                            <h2>세계의 {world.date.substring(0, 10)} 코로나 현황</h2>\n                            <ul className=\"summary\">\n                                <li className=\"confirmed\">\n                                    <h4>확진환자</h4>\n                                    <h3>{world.TotalConfirmed.toLocaleString()}</h3>\n                                    <h4>{world.NewConfirmed > 0 ? '▲' : null} {world.NewConfirmed.toLocaleString()} </h4>\n                                </li>\n                                <li className=\"recovered\">\n                                    <h4>격리해제</h4>\n                                    <h3>{world.TotalRecovered.toLocaleString()}</h3>\n                                    <h4>{world.NewRecovered > 0 ? '▲' : null} {world.NewRecovered.toLocaleString()}</h4>\n                                </li>\n                                <li className=\"deaths\">\n                                    <h4>사망</h4>\n                                    <h3>{world.TotalDeaths.toLocaleString()}</h3>\n                                    <h4>{world.NewDeaths > 0 ? '▲' : null} {world.NewDeaths.toLocaleString()}</h4>\n                                </li>\n                            </ul>\n                            <sub>※ 수치가 비정상적으로 보일 경우는 API DB의 문제이니 양해바랍니다.</sub>\n                            <br />\n                            <sub>※ 격리해제자의 수치가 0으로 표시되고 있으니 양해바랍니다.</sub>\n\n                            <br />\n                            <br />\n                            <br />\n\n                            <p style={{ color: '#ccc' }}>상세현황은 국가명을 클릭해주세요 / 데이터 정렬은 개요명을 클릭해주세요</p>\n                            {\n                                <table>\n                                    <tbody>\n                                        <tr>\n                                            <th onClick={() => sortData(\"Country\")}>\n                                                <p>\n                                                    국가 {sortState === \"descCountry\" ? \"▼\" : sortState === \"asceCountry\" ? '▲' : null}\n                                                </p>\n                                            </th>\n\n                                            <th onClick={() => sortData(\"Confirmed\")}>\n                                                <p>\n                                                    확진자 {sortState === \"descConfirmed\" ? \"▼\" : sortState === \"asceConfirmed\" ? '▲' : null}\n                                                </p>\n                                            </th>\n\n                                            <th onClick={() => sortData(\"Recovered\")}>\n                                                <p>\n                                                    격리해제 {sortState === \"descRecovered\" ? \"▼\" : sortState === \"asceRecovered\" ? '▲' : null}\n                                                </p>\n                                            </th>\n\n                                            <th onClick={() => sortData(\"Deaths\")}>\n                                                <p>\n                                                    사망 {sortState === \"descDeaths\" ? \"▼\" : sortState === \"asceDeaths\" ? '▲' : null}\n                                                </p>\n                                            </th>\n                                        </tr>\n                                        {\n                                            countries.map((country, i) => (\n                                                <tr key={i}>\n                                                    <td>\n                                                        <a href={`/${country.Slug}`}>\n                                                            {country.Country}\n                                                        </a>\n                                                    </td>\n\n                                                    <td className=\"world_confirmed\">\n                                                        <p>{country.TotalConfirmed.toLocaleString()}</p>\n                                                        {\n                                                            country.NewConfirmed > 0 ?\n                                                                <h5>▲ {country.NewConfirmed.toLocaleString()}</h5> : null\n                                                        }\n                                                    </td>\n\n                                                    <td className=\"world_recovered\">\n                                                        <p>{country.TotalRecovered.toLocaleString()}</p>\n                                                        {\n                                                            country.NewRecovered > 0 ?\n                                                                <h5>▲ {country.NewRecovered.toLocaleString()}</h5> : null\n                                                        }\n                                                    </td>\n\n                                                    <td className=\"world_deaths\">\n                                                        <p>{country.TotalDeaths.toLocaleString()}</p>\n                                                        {\n                                                            country.NewDeaths > 0 ?\n                                                                <h5>▲ {country.NewDeaths.toLocaleString()}</h5> : null\n                                                        }\n                                                    </td>\n                                                </tr>\n                                            ))\n                                        }\n                                    </tbody>\n                                </table>\n                            }\n                        </>\n                    ) : 'Loading...'\n            }\n        </>\n    )\n}\n\nexport default Contents","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chrat from './Chrat';\n\nconst Contents = () => {\n    const [total, setTotal] = useState(null);\n    const [today, setToday] = useState(null);\n    const [daily, setDaily] = useState(null);\n    const [monthly, setMonthly] = useState({});\n    const [init, setInit] = useState(false);\n\n    useEffect(() => {\n        const fetchEvents = async () => {\n            const res = await axios.get(`https://api.covid19api.com/total/dayone/country/kr`);\n            const data = res.data;\n\n            makeData(data);\n\n            let today, yesterday;\n            const verify = data[data.length - 1].Confirmed - data[data.length - 2].Confirmed;\n\n            if (verify !== 0) {\n                today = data[data.length - 1];\n                yesterday = data[data.length - 2];\n                setTotal(data)\n            } else {\n                today = data[data.length - 2];\n                yesterday = data[data.length - 3];\n                setTotal(data.filter((element, index) => index < data.length - 1))\n            }\n\n            setToday({\n                date: today.Date,\n                confirmed: today.Confirmed - yesterday.Confirmed,\n                deaths: today.Deaths - yesterday.Deaths,\n                recovered: today.Recovered - yesterday.Recovered\n            })\n\n            let arr = [];\n            const length =\n                verify === 0 ? data.length - 1 : data.length\n            for (let i = 0; i < length; i++) {\n                i === 0 ?\n                    arr.push({\n                        date: data[i].Date,\n                        confirmed: data[i].Confirmed,\n                        recovered: data[i].Recovered,\n                        deaths: data[i].Deaths\n                    }) :\n                    arr.push({\n                        date: data[i].Date,\n                        confirmed: data[i].Confirmed - data[i - 1].Confirmed,\n                        recovered: data[i].Recovered - data[i - 1].Recovered,\n                        deaths: data[i].Deaths - data[i - 1].Deaths\n                    })\n            }\n            setDaily(arr);\n\n            await setInit(true)\n        }\n\n        const makeData = items => {\n            const arr = items.reduce((acc, cur) => {\n                const currentDate = new Date(cur.Date);\n                const year = currentDate.getFullYear();\n                const month = currentDate.getMonth();\n                const date = currentDate.getDate();\n\n                const confirmed = cur.Confirmed;\n                const active = cur.Active;\n                const death = cur.Deaths;\n                const recovered = cur.Recovered;\n\n                const findItem = acc.find(a => a.year === year && a.month === month)\n                if (!findItem) {\n                    acc.push({ year, month, date, confirmed, active, death, recovered })\n                }\n                if (findItem && findItem.date < date) {\n                    findItem.year = year;\n                    findItem.month = month;\n                    findItem.date = date;\n                    findItem.confirmed = confirmed;\n                    findItem.active = active;\n                    findItem.death = death;\n                    findItem.recovered = recovered;\n                }\n\n                return acc;\n            }, [])\n\n            const labels = arr.map(a => `${a.year - 2000}-${a.month + 1}`)\n\n            setMonthly({\n                labels,\n                datasets: [\n                    {\n                        label: \"누적 확진자\",\n                        backgroundColor: \"salmon\",\n                        fill: true,\n                        data: arr.map(a => a.confirmed)\n                    }\n                ]\n            })\n        }\n\n        fetchEvents()\n    }, [])\n\n    return (\n        <>\n            {\n                init ?\n                    <Chrat\n                        total={total}\n                        today={today}\n                        daily={daily}\n                        monthly={monthly}\n                    /> : 'Loading...'\n            }\n\n        </>\n    )\n}\n\nexport default Contents","/* eslint no-restricted-globals: [\"off\"] */\n\nimport React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport Country from './Components/ContentCountry';\nimport World from './Components/ContentWorld';\nimport Korea from './Components/ContentKorea';\nimport './App.css';\n\nconst selectOptions = [\n    { value: '', label: '주요 국가 선택' },\n    { value: 'world', label: '세계' },\n    { value: 'kr', label: '국내' },\n    { value: 'cn', label: '중국' },\n    { value: 'jp', label: '일본' },\n    { value: 'us', label: '미국' },\n    { value: 'gb', label: '영국' },\n    { value: 'il', label: '이스라엘' },\n]\n\nconst App = () => {\n    const onChange = e => {\n        e.preventDefault();\n\n        if (e.currentTarget.value === \"\") return;\n        location.href = `${location.origin}/${e.currentTarget.value}`;\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">\n                <h1><a href=\"/\">COVID-19</a></h1>\n                <select onChange={onChange}>\n                    {selectOptions.map((option, i) => <option key={i} value={option.value}>{option.label}</option>)}\n                </select>\n            </header>\n            <main>\n                <Switch>\n                    <Route exact path=\"/\" component={Korea} />\n                    <Route exact path=\"/kr\" component={Korea} />\n                    <Route exact path=\"/korea-south\" component={Korea} />\n                    <Route exact path=\"/world\" component={World} />\n                    <Route exact path=\"/:slug\" component={Country} />\n                </Switch>\n            </main>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}